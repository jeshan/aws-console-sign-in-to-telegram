AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'lets you know of AWS console sign-ins in a Telegram chat'

Parameters:
  DlqName:
    Type: String
    Description: The SNS topic in this region which you use as dead-letter queue. (Optional)
    Default: ''
  StackEventsTopic:
    Type: String
    Description: The SNS topic in this region where you publish Cloudformation stack events. (Optional)
    Default: ''
  TelegramBotToken:
    Type: String
    NoEcho: true
  TelegramChatId:
    Type: String

Metadata:
  AWS::ServerlessRepo::Application:
    Name: aws-console-sign-in-to-telegram
    Description: Lets you know when people logs to a (private) Telegram group.
    Author: jeshan
    SpdxLicenseId: BSD-2-Clause
    LicenseUrl: ../LICENCE.txt
    ReadmeUrl: ../README.md
    Labels: ['telegram']
    HomePageUrl: https://github.com/jeshan/aws-console-sign-in-to-telegram
    SemanticVersion: '0.1.0'
    SourceCodeUrl: https://github.com/jeshan/aws-console-sign-in-to-telegram

Resources:
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: !Sub |
        from botocore.vendored import requests
        import json

        def handler(event, context):
          print('event', event)

          account = event.get('account')
          detail = event['detail']
          identity = detail['userIdentity']
          if 'sessionContext' in identity:
            username = identity['sessionContext']['sessionIssuer']['userName']
          else:
            username = identity['arn']
          if 'errorMessage' in detail:
            attempt = detail['errorMessage']
          else:
            attempt = detail['responseElements']['ConsoleLogin']
          message = f'From {account}:\nSign-in attempt by {username} as {identity["type"]} ({identity["principalId"]}). {attempt}\nIp: {detail["sourceIPAddress"]}, Time: {detail["eventTime"]}'

          requests.post('https://api.telegram.org/bot${TelegramBotToken}/sendMessage', json={'chat_id': ${TelegramChatId}, 'text': message})
      Handler: index.handler
      Timeout: 30
      MemorySize: 128
      Runtime: python3.7
      Policies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Sub arn:aws:sns:*:${AWS::AccountId}:${StackEventsTopic}
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${DlqName}
      Events:
        Cw:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              detail-type: ['AWS Console Sign In via CloudTrail']
